
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000087c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000087c  00000910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080006e  0080006e  0000091e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000091e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b8  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002b1  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014a  00000000  00000000  00000ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000271  00000000  00000000  00000df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a4  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021a  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e7       	ldi	r30, 0x7C	; 124
  3a:	f8 e0       	ldi	r31, 0x08	; 8
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ae 36       	cpi	r26, 0x6E	; 110
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ae e6       	ldi	r26, 0x6E	; 110
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 38       	cpi	r26, 0x84	; 132
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	b0 d1       	rcall	.+864    	; 0x3ba <main>
  5a:	0e c4       	rjmp	.+2076   	; 0x878 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z11init_motorsv>:
void init_motors()
{
	//Configure PWM pins OC1B and OC1A to output mode
//DDRB |= (1<<PIND4) | (1<<PIND5);
	//DDRD = 0xFF;
	DDRB=0x0F;
  5e:	8f e0       	ldi	r24, 0x0F	; 15
  60:	87 bb       	out	0x17, r24	; 23
	//Configure motor direction control pins to output mode
//DDRB |= (1<<PIND6) | (1<<PIND7);
	//Clear OC1A/OC1B on compare match when up-counting and set OC1A/OC1B 
	//on compare match when downcounting (sets PWM to non-inverting mode)
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1);	
  62:	8f b5       	in	r24, 0x2f	; 47
  64:	80 6a       	ori	r24, 0xA0	; 160
  66:	8f bd       	out	0x2f, r24	; 47
	//Selects prescalar value 64
	TCCR1B |= (1<<CS10) | (1<<CS11);
  68:	8e b5       	in	r24, 0x2e	; 46
  6a:	83 60       	ori	r24, 0x03	; 3
  6c:	8e bd       	out	0x2e, r24	; 46
	//Phase Correct PWM mode is selected
	TCCR1A |= (1<<WGM11);
  6e:	8f b5       	in	r24, 0x2f	; 47
  70:	82 60       	ori	r24, 0x02	; 2
  72:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM13);
  74:	8e b5       	in	r24, 0x2e	; 46
  76:	80 61       	ori	r24, 0x10	; 16
  78:	8e bd       	out	0x2e, r24	; 46
	//Sets TOP value to be 250. Frequency is 500Hz
	ICR1 = 250;
  7a:	8a ef       	ldi	r24, 0xFA	; 250
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	97 bd       	out	0x27, r25	; 39
  80:	86 bd       	out	0x26, r24	; 38
}
  82:	08 95       	ret

00000084 <_Z6motorsii>:

void motors(int leftMotorSpeed, int rightMotorSpeed)
  84:	9c 01       	movw	r18, r24
{
	if(leftMotorSpeed >= 0)
  86:	97 fd       	sbrc	r25, 7
  88:	04 c0       	rjmp	.+8      	; 0x92 <_Z6motorsii+0xe>
    {
        PORTB &= 0b00000100;
  8a:	88 b3       	in	r24, 0x18	; 24
  8c:	84 70       	andi	r24, 0x04	; 4
  8e:	88 bb       	out	0x18, r24	; 24
  90:	03 c0       	rjmp	.+6      	; 0x98 <_Z6motorsii+0x14>
		//PORTB &= ~(1<<PIND7);
		//PORTB = 0b00000001;
    }
    else
    {
		PORTB |= 0b00001000;
  92:	c3 9a       	sbi	0x18, 3	; 24
        leftMotorPWMPin = 250 + leftMotorSpeed;
  94:	26 50       	subi	r18, 0x06	; 6
  96:	3f 4f       	sbci	r19, 0xFF	; 255
  98:	39 bd       	out	0x29, r19	; 41
  9a:	28 bd       	out	0x28, r18	; 40
		//PORTB |= 0b00000100;
        //PORTB |= 1<<PIND7;
		//PORTB = 0b00000010;
    }
	if(rightMotorSpeed >= 0)
  9c:	77 fd       	sbrc	r23, 7
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <_Z6motorsii+0x24>
    {
		PORTB &= 0b00000010;
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	82 70       	andi	r24, 0x02	; 2
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	03 c0       	rjmp	.+6      	; 0xae <_Z6motorsii+0x2a>
        //PORTB &= ~(1<<PIND6);
		//PORTB = 0b00000100;
    }
    else
    {
		PORTB |= 0b00000001;
  a8:	c0 9a       	sbi	0x18, 0	; 24
        rightMotorPWMPin = 250 + rightMotorSpeed;
  aa:	66 50       	subi	r22, 0x06	; 6
  ac:	7f 4f       	sbci	r23, 0xFF	; 255
  ae:	7b bd       	out	0x2b, r23	; 43
  b0:	6a bd       	out	0x2a, r22	; 42
  b2:	08 95       	ret

000000b4 <_Z8readsensv>:
{
	int i;
	//unsigned char last_time;
	//unsigned char delta_time;
	//unsigned int time = 0;
	for(i = 0; i < num_sensor; i++)
  b4:	20 91 60 00 	lds	r18, 0x0060
  b8:	30 91 61 00 	lds	r19, 0x0061
  bc:	ee e6       	ldi	r30, 0x6E	; 110
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	03 c0       	rjmp	.+6      	; 0xcc <_Z8readsensv+0x18>
	{
		sensor_values[i] = 0;	
  c6:	11 92       	st	Z+, r1
  c8:	11 92       	st	Z+, r1
{
	int i;
	//unsigned char last_time;
	//unsigned char delta_time;
	//unsigned int time = 0;
	for(i = 0; i < num_sensor; i++)
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	82 17       	cp	r24, r18
  ce:	93 07       	cpc	r25, r19
  d0:	d4 f3       	brlt	.-12     	; 0xc6 <_Z8readsensv+0x12>
	{
		sensor_values[i] = 0;	
	}
	sensor_values[0]=READ(C,0);
  d2:	83 b3       	in	r24, 0x13	; 19
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	81 70       	andi	r24, 0x01	; 1
  d8:	90 70       	andi	r25, 0x00	; 0
  da:	90 93 6f 00 	sts	0x006F, r25
  de:	80 93 6e 00 	sts	0x006E, r24
	sensor_values[1]=READ(C,1);
  e2:	83 b3       	in	r24, 0x13	; 19
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	82 70       	andi	r24, 0x02	; 2
  e8:	90 70       	andi	r25, 0x00	; 0
  ea:	90 93 71 00 	sts	0x0071, r25
  ee:	80 93 70 00 	sts	0x0070, r24
	sensor_values[2]=READ(C,2);
  f2:	83 b3       	in	r24, 0x13	; 19
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	84 70       	andi	r24, 0x04	; 4
  f8:	90 70       	andi	r25, 0x00	; 0
  fa:	90 93 73 00 	sts	0x0073, r25
  fe:	80 93 72 00 	sts	0x0072, r24
	sensor_values[3]=READ(C,3);
 102:	83 b3       	in	r24, 0x13	; 19
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	88 70       	andi	r24, 0x08	; 8
 108:	90 70       	andi	r25, 0x00	; 0
 10a:	90 93 75 00 	sts	0x0075, r25
 10e:	80 93 74 00 	sts	0x0074, r24
	sensor_values[4]=READ(C,4);
 112:	83 b3       	in	r24, 0x13	; 19
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	80 71       	andi	r24, 0x10	; 16
 118:	90 70       	andi	r25, 0x00	; 0
 11a:	90 93 77 00 	sts	0x0077, r25
 11e:	80 93 76 00 	sts	0x0076, r24
	sensor_values[5]=READ(C,5);
 122:	83 b3       	in	r24, 0x13	; 19
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	80 72       	andi	r24, 0x20	; 32
 128:	90 70       	andi	r25, 0x00	; 0
 12a:	90 93 79 00 	sts	0x0079, r25
 12e:	80 93 78 00 	sts	0x0078, r24
	sensor_values[6]=READ(B,4);
 132:	86 b3       	in	r24, 0x16	; 22
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	80 71       	andi	r24, 0x10	; 16
 138:	90 70       	andi	r25, 0x00	; 0
 13a:	90 93 7b 00 	sts	0x007B, r25
 13e:	80 93 7a 00 	sts	0x007A, r24
	sensor_values[7]=READ(B,5);
 142:	86 b3       	in	r24, 0x16	; 22
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	80 72       	andi	r24, 0x20	; 32
 148:	90 70       	andi	r25, 0x00	; 0
 14a:	90 93 7d 00 	sts	0x007D, r25
 14e:	80 93 7c 00 	sts	0x007C, r24
}
 152:	08 95       	ret

00000154 <_Z9read_linev>:
		//PORTB = 0b00001000;
    }
}


int read_line()
 154:	6f 92       	push	r6
 156:	7f 92       	push	r7
 158:	8f 92       	push	r8
 15a:	9f 92       	push	r9
 15c:	af 92       	push	r10
 15e:	bf 92       	push	r11
 160:	cf 92       	push	r12
 162:	df 92       	push	r13
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
	unsigned char i, on_line = 0;
	unsigned long avg; // this is for the weighted total, which is long before division
	unsigned int sum; // this is for the denominator which is <= 64000
	static int last_value=0; // assume initially that the line is left.

	readsens();
 170:	a1 df       	rcall	.-190    	; 0xb4 <_Z8readsensv>

	avg = 0;
	sum = 0;
  
	for(i=0;i<num_sensor;i++) 
 172:	a0 90 60 00 	lds	r10, 0x0060
 176:	b0 90 61 00 	lds	r11, 0x0061
 17a:	cc 24       	eor	r12, r12
 17c:	dd 24       	eor	r13, r13
 17e:	99 24       	eor	r9, r9
 180:	88 24       	eor	r8, r8
 182:	ee 24       	eor	r14, r14
 184:	ff 24       	eor	r15, r15
 186:	87 01       	movw	r16, r14
		}
		
		// only average in values that are above a noise threshold
		if(value > 50) 
		{
			avg += (long)(value) * (i * 1000);
 188:	38 ee       	ldi	r19, 0xE8	; 232
 18a:	63 2e       	mov	r6, r19
 18c:	33 e0       	ldi	r19, 0x03	; 3
 18e:	73 2e       	mov	r7, r19
 190:	27 c0       	rjmp	.+78     	; 0x1e0 <_Z9read_linev+0x8c>
	avg = 0;
	sum = 0;
  
	for(i=0;i<num_sensor;i++) 
	{
		int value = sensor_values[i];
 192:	fc 01       	movw	r30, r24
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	e2 59       	subi	r30, 0x92	; 146
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	c0 81       	ld	r28, Z
 19e:	d1 81       	ldd	r29, Z+1	; 0x01
		
		// keep track of whether we see the line at all
		if(value > 200) 
 1a0:	c9 3c       	cpi	r28, 0xC9	; 201
 1a2:	d1 05       	cpc	r29, r1
 1a4:	14 f0       	brlt	.+4      	; 0x1aa <_Z9read_linev+0x56>
 1a6:	88 24       	eor	r8, r8
 1a8:	83 94       	inc	r8
		{
			on_line = 1;
		}
		
		// only average in values that are above a noise threshold
		if(value > 50) 
 1aa:	c3 33       	cpi	r28, 0x33	; 51
 1ac:	d1 05       	cpc	r29, r1
 1ae:	bc f0       	brlt	.+46     	; 0x1de <_Z9read_linev+0x8a>
		{
			avg += (long)(value) * (i * 1000);
 1b0:	86 9d       	mul	r24, r6
 1b2:	b0 01       	movw	r22, r0
 1b4:	87 9d       	mul	r24, r7
 1b6:	70 0d       	add	r23, r0
 1b8:	96 9d       	mul	r25, r6
 1ba:	70 0d       	add	r23, r0
 1bc:	11 24       	eor	r1, r1
 1be:	88 27       	eor	r24, r24
 1c0:	77 fd       	sbrc	r23, 7
 1c2:	80 95       	com	r24
 1c4:	98 2f       	mov	r25, r24
 1c6:	9e 01       	movw	r18, r28
 1c8:	44 27       	eor	r20, r20
 1ca:	37 fd       	sbrc	r19, 7
 1cc:	40 95       	com	r20
 1ce:	54 2f       	mov	r21, r20
 1d0:	eb d2       	rcall	.+1494   	; 0x7a8 <__mulsi3>
 1d2:	e6 0e       	add	r14, r22
 1d4:	f7 1e       	adc	r15, r23
 1d6:	08 1f       	adc	r16, r24
 1d8:	19 1f       	adc	r17, r25
			sum += value;
 1da:	cc 0e       	add	r12, r28
 1dc:	dd 1e       	adc	r13, r29
	readsens();

	avg = 0;
	sum = 0;
  
	for(i=0;i<num_sensor;i++) 
 1de:	93 94       	inc	r9
 1e0:	89 2d       	mov	r24, r9
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	8a 15       	cp	r24, r10
 1e6:	9b 05       	cpc	r25, r11
 1e8:	a4 f2       	brlt	.-88     	; 0x192 <_Z9read_linev+0x3e>
			avg += (long)(value) * (i * 1000);
			sum += value;
		}
	}

	if(!on_line)
 1ea:	88 20       	and	r8, r8
 1ec:	11 f5       	brne	.+68     	; 0x232 <_Z9read_linev+0xde>
	{
		// If it last read to the left of center, return 0.
		if(last_value < (num_sensor-1)*1000/2)
 1ee:	84 ef       	ldi	r24, 0xF4	; 244
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	9c 01       	movw	r18, r24
 1f4:	a2 9e       	mul	r10, r18
 1f6:	c0 01       	movw	r24, r0
 1f8:	a3 9e       	mul	r10, r19
 1fa:	90 0d       	add	r25, r0
 1fc:	b2 9e       	mul	r11, r18
 1fe:	90 0d       	add	r25, r0
 200:	11 24       	eor	r1, r1
 202:	84 5f       	subi	r24, 0xF4	; 244
 204:	91 40       	sbci	r25, 0x01	; 1
 206:	20 91 82 00 	lds	r18, 0x0082
 20a:	30 91 83 00 	lds	r19, 0x0083
 20e:	28 17       	cp	r18, r24
 210:	39 07       	cpc	r19, r25
 212:	1c f4       	brge	.+6      	; 0x21a <_Z9read_linev+0xc6>
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	17 c0       	rjmp	.+46     	; 0x248 <_Z9read_linev+0xf4>
			return 0;
		
		// If it last read to the right of center, return the max.
		else
			return (num_sensor-1)*1000;
 21a:	88 ee       	ldi	r24, 0xE8	; 232
 21c:	93 e0       	ldi	r25, 0x03	; 3
 21e:	a8 9e       	mul	r10, r24
 220:	a0 01       	movw	r20, r0
 222:	a9 9e       	mul	r10, r25
 224:	50 0d       	add	r21, r0
 226:	b8 9e       	mul	r11, r24
 228:	50 0d       	add	r21, r0
 22a:	11 24       	eor	r1, r1
 22c:	48 5e       	subi	r20, 0xE8	; 232
 22e:	53 40       	sbci	r21, 0x03	; 3
 230:	0b c0       	rjmp	.+22     	; 0x248 <_Z9read_linev+0xf4>

	}

	last_value = avg/sum;
 232:	96 01       	movw	r18, r12
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	c8 01       	movw	r24, r16
 23a:	b7 01       	movw	r22, r14
 23c:	e7 d2       	rcall	.+1486   	; 0x80c <__udivmodsi4>
 23e:	a9 01       	movw	r20, r18
 240:	30 93 83 00 	sts	0x0083, r19
 244:	20 93 82 00 	sts	0x0082, r18

	return last_value;
}
 248:	ca 01       	movw	r24, r20
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	df 90       	pop	r13
 258:	cf 90       	pop	r12
 25a:	bf 90       	pop	r11
 25c:	af 90       	pop	r10
 25e:	9f 90       	pop	r9
 260:	8f 90       	pop	r8
 262:	7f 90       	pop	r7
 264:	6f 90       	pop	r6
 266:	08 95       	ret

00000268 <_Z9followPIDv>:

float KP = 3 ,KI = 50000 , KD = 16/1;
int   integral  = 0;
int   last_proportional = 0;

void followPID()
 268:	af 92       	push	r10
 26a:	bf 92       	push	r11
 26c:	cf 92       	push	r12
 26e:	df 92       	push	r13
 270:	ef 92       	push	r14
 272:	ff 92       	push	r15
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
{
    int position = read_line();
 278:	6d df       	rcall	.-294    	; 0x154 <_Z9read_linev>

    int center = (( (num_sensor - 1) * 1000) / 2);

    int proportional = position - center;
 27a:	20 91 60 00 	lds	r18, 0x0060
 27e:	30 91 61 00 	lds	r19, 0x0061
 282:	04 ef       	ldi	r16, 0xF4	; 244
 284:	11 e0       	ldi	r17, 0x01	; 1
 286:	a9 01       	movw	r20, r18
 288:	40 9f       	mul	r20, r16
 28a:	90 01       	movw	r18, r0
 28c:	41 9f       	mul	r20, r17
 28e:	30 0d       	add	r19, r0
 290:	50 9f       	mul	r21, r16
 292:	30 0d       	add	r19, r0
 294:	11 24       	eor	r1, r1
 296:	02 1b       	sub	r16, r18
 298:	13 0b       	sbc	r17, r19
 29a:	08 0f       	add	r16, r24
 29c:	19 1f       	adc	r17, r25

    int derivative = proportional - last_proportional;

    int power_difference = proportional / KP + integral / KI + derivative * KD;
 29e:	a0 90 7e 00 	lds	r10, 0x007E
 2a2:	b0 90 7f 00 	lds	r11, 0x007F
 2a6:	b8 01       	movw	r22, r16
 2a8:	88 27       	eor	r24, r24
 2aa:	77 fd       	sbrc	r23, 7
 2ac:	80 95       	com	r24
 2ae:	98 2f       	mov	r25, r24
 2b0:	8c d1       	rcall	.+792    	; 0x5ca <__floatsisf>
 2b2:	20 91 62 00 	lds	r18, 0x0062
 2b6:	30 91 63 00 	lds	r19, 0x0063
 2ba:	40 91 64 00 	lds	r20, 0x0064
 2be:	50 91 65 00 	lds	r21, 0x0065
 2c2:	e8 d0       	rcall	.+464    	; 0x494 <__divsf3>
 2c4:	6b 01       	movw	r12, r22
 2c6:	7c 01       	movw	r14, r24
 2c8:	b5 01       	movw	r22, r10
 2ca:	88 27       	eor	r24, r24
 2cc:	77 fd       	sbrc	r23, 7
 2ce:	80 95       	com	r24
 2d0:	98 2f       	mov	r25, r24
 2d2:	7b d1       	rcall	.+758    	; 0x5ca <__floatsisf>
 2d4:	20 91 66 00 	lds	r18, 0x0066
 2d8:	30 91 67 00 	lds	r19, 0x0067
 2dc:	40 91 68 00 	lds	r20, 0x0068
 2e0:	50 91 69 00 	lds	r21, 0x0069
 2e4:	d7 d0       	rcall	.+430    	; 0x494 <__divsf3>
 2e6:	9b 01       	movw	r18, r22
 2e8:	ac 01       	movw	r20, r24
 2ea:	c7 01       	movw	r24, r14
 2ec:	b6 01       	movw	r22, r12
 2ee:	6e d0       	rcall	.+220    	; 0x3cc <__addsf3>
 2f0:	6b 01       	movw	r12, r22
 2f2:	7c 01       	movw	r14, r24
 2f4:	80 91 80 00 	lds	r24, 0x0080
 2f8:	90 91 81 00 	lds	r25, 0x0081
 2fc:	b8 01       	movw	r22, r16
 2fe:	68 1b       	sub	r22, r24
 300:	79 0b       	sbc	r23, r25
 302:	88 27       	eor	r24, r24
 304:	77 fd       	sbrc	r23, 7
 306:	80 95       	com	r24
 308:	98 2f       	mov	r25, r24
 30a:	5f d1       	rcall	.+702    	; 0x5ca <__floatsisf>
 30c:	20 91 6a 00 	lds	r18, 0x006A
 310:	30 91 6b 00 	lds	r19, 0x006B
 314:	40 91 6c 00 	lds	r20, 0x006C
 318:	50 91 6d 00 	lds	r21, 0x006D
 31c:	e2 d1       	rcall	.+964    	; 0x6e2 <__mulsf3>
 31e:	9b 01       	movw	r18, r22
 320:	ac 01       	movw	r20, r24
 322:	c7 01       	movw	r24, r14
 324:	b6 01       	movw	r22, r12
 326:	52 d0       	rcall	.+164    	; 0x3cc <__addsf3>
 328:	1d d1       	rcall	.+570    	; 0x564 <__fixsfsi>
 32a:	ab 01       	movw	r20, r22
    last_proportional    = proportional;
 32c:	10 93 81 00 	sts	0x0081, r17
 330:	00 93 80 00 	sts	0x0080, r16
    integral  += proportional;
 334:	a0 0e       	add	r10, r16
 336:	b1 1e       	adc	r11, r17
 338:	b0 92 7f 00 	sts	0x007F, r11
 33c:	a0 92 7e 00 	sts	0x007E, r10

    const int max = 200;
    const int max_diffrence = 20;
    const int factor_diffrence = 2;

    if(power_difference > max)
 340:	69 3c       	cpi	r22, 0xC9	; 201
 342:	71 05       	cpc	r23, r1
 344:	1c f0       	brlt	.+6      	; 0x34c <_Z9followPIDv+0xe4>
 346:	48 ec       	ldi	r20, 0xC8	; 200
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	06 c0       	rjmp	.+12     	; 0x358 <_Z9followPIDv+0xf0>
        power_difference = max;
    if(power_difference < -max)
 34c:	2f ef       	ldi	r18, 0xFF	; 255
 34e:	68 33       	cpi	r22, 0x38	; 56
 350:	72 07       	cpc	r23, r18
 352:	4c f0       	brlt	.+18     	; 0x366 <_Z9followPIDv+0xfe>
    // if diffrence is too much robot skids 

    int leftMotorSpeed  = max;
    int rightMotorSpeed = max-power_difference;

    if(power_difference < 0)
 354:	77 fd       	sbrc	r23, 7
 356:	09 c0       	rjmp	.+18     	; 0x36a <_Z9followPIDv+0x102>

    
    // if diffrence is too much robot skids 

    int leftMotorSpeed  = max;
    int rightMotorSpeed = max-power_difference;
 358:	28 ec       	ldi	r18, 0xC8	; 200
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	24 1b       	sub	r18, r20
 35e:	35 0b       	sbc	r19, r21
 360:	e8 ec       	ldi	r30, 0xC8	; 200
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	07 c0       	rjmp	.+14     	; 0x374 <_Z9followPIDv+0x10c>
 366:	48 e3       	ldi	r20, 0x38	; 56
 368:	5f ef       	ldi	r21, 0xFF	; 255

    if(power_difference < 0)
    {
        leftMotorSpeed  = max+power_difference;
 36a:	fa 01       	movw	r30, r20
 36c:	e8 53       	subi	r30, 0x38	; 56
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	28 ec       	ldi	r18, 0xC8	; 200
 372:	30 e0       	ldi	r19, 0x00	; 0
        rightMotorSpeed = max;
    }


    if(leftMotorSpeed - rightMotorSpeed > max_diffrence)
 374:	cf 01       	movw	r24, r30
 376:	82 1b       	sub	r24, r18
 378:	93 0b       	sbc	r25, r19
 37a:	85 31       	cpi	r24, 0x15	; 21
 37c:	91 05       	cpc	r25, r1
 37e:	34 f0       	brlt	.+12     	; 0x38c <_Z9followPIDv+0x124>
    {
        leftMotorSpeed -= (leftMotorSpeed - rightMotorSpeed)/factor_diffrence;
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	30 d2       	rcall	.+1120   	; 0x7e6 <__divmodhi4>
 386:	e6 1b       	sub	r30, r22
 388:	f7 0b       	sbc	r31, r23
 38a:	0b c0       	rjmp	.+22     	; 0x3a2 <_Z9followPIDv+0x13a>
    } 
    else if(rightMotorSpeed - leftMotorSpeed > max_diffrence)
 38c:	c9 01       	movw	r24, r18
 38e:	8e 1b       	sub	r24, r30
 390:	9f 0b       	sbc	r25, r31
 392:	85 31       	cpi	r24, 0x15	; 21
 394:	91 05       	cpc	r25, r1
 396:	2c f0       	brlt	.+10     	; 0x3a2 <_Z9followPIDv+0x13a>
    {
        rightMotorSpeed -= (rightMotorSpeed - leftMotorSpeed)/factor_diffrence;
 398:	62 e0       	ldi	r22, 0x02	; 2
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	24 d2       	rcall	.+1096   	; 0x7e6 <__divmodhi4>
 39e:	26 1b       	sub	r18, r22
 3a0:	37 0b       	sbc	r19, r23
    }

    motors(leftMotorSpeed,rightMotorSpeed);
 3a2:	cf 01       	movw	r24, r30
 3a4:	b9 01       	movw	r22, r18
 3a6:	6e de       	rcall	.-804    	; 0x84 <_Z6motorsii>

}
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	cf 90       	pop	r12
 3b4:	bf 90       	pop	r11
 3b6:	af 90       	pop	r10
 3b8:	08 95       	ret

000003ba <main>:

int main(void)
{
	DDRB=0x0F;
 3ba:	8f e0       	ldi	r24, 0x0F	; 15
 3bc:	87 bb       	out	0x17, r24	; 23
	DDRC=0x00;
 3be:	14 ba       	out	0x14, r1	; 20
	DDRD=0xFF;
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	81 bb       	out	0x11, r24	; 17
	init_motors();
 3c4:	4c de       	rcall	.-872    	; 0x5e <_Z11init_motorsv>
	while(1)
	{
		followPID();
 3c6:	50 df       	rcall	.-352    	; 0x268 <_Z9followPIDv>
 3c8:	fe cf       	rjmp	.-4      	; 0x3c6 <main+0xc>

000003ca <__subsf3>:
 3ca:	50 58       	subi	r21, 0x80	; 128

000003cc <__addsf3>:
 3cc:	bb 27       	eor	r27, r27
 3ce:	aa 27       	eor	r26, r26
 3d0:	0e d0       	rcall	.+28     	; 0x3ee <__addsf3x>
 3d2:	4d c1       	rjmp	.+666    	; 0x66e <__fp_round>
 3d4:	3e d1       	rcall	.+636    	; 0x652 <__fp_pscA>
 3d6:	30 f0       	brcs	.+12     	; 0x3e4 <__addsf3+0x18>
 3d8:	43 d1       	rcall	.+646    	; 0x660 <__fp_pscB>
 3da:	20 f0       	brcs	.+8      	; 0x3e4 <__addsf3+0x18>
 3dc:	31 f4       	brne	.+12     	; 0x3ea <__addsf3+0x1e>
 3de:	9f 3f       	cpi	r25, 0xFF	; 255
 3e0:	11 f4       	brne	.+4      	; 0x3e6 <__addsf3+0x1a>
 3e2:	1e f4       	brtc	.+6      	; 0x3ea <__addsf3+0x1e>
 3e4:	33 c1       	rjmp	.+614    	; 0x64c <__fp_nan>
 3e6:	0e f4       	brtc	.+2      	; 0x3ea <__addsf3+0x1e>
 3e8:	e0 95       	com	r30
 3ea:	e7 fb       	bst	r30, 7
 3ec:	29 c1       	rjmp	.+594    	; 0x640 <__fp_inf>

000003ee <__addsf3x>:
 3ee:	e9 2f       	mov	r30, r25
 3f0:	4f d1       	rcall	.+670    	; 0x690 <__fp_split3>
 3f2:	80 f3       	brcs	.-32     	; 0x3d4 <__addsf3+0x8>
 3f4:	ba 17       	cp	r27, r26
 3f6:	62 07       	cpc	r22, r18
 3f8:	73 07       	cpc	r23, r19
 3fa:	84 07       	cpc	r24, r20
 3fc:	95 07       	cpc	r25, r21
 3fe:	18 f0       	brcs	.+6      	; 0x406 <__addsf3x+0x18>
 400:	71 f4       	brne	.+28     	; 0x41e <__addsf3x+0x30>
 402:	9e f5       	brtc	.+102    	; 0x46a <__stack+0xb>
 404:	67 c1       	rjmp	.+718    	; 0x6d4 <__fp_zero>
 406:	0e f4       	brtc	.+2      	; 0x40a <__addsf3x+0x1c>
 408:	e0 95       	com	r30
 40a:	0b 2e       	mov	r0, r27
 40c:	ba 2f       	mov	r27, r26
 40e:	a0 2d       	mov	r26, r0
 410:	0b 01       	movw	r0, r22
 412:	b9 01       	movw	r22, r18
 414:	90 01       	movw	r18, r0
 416:	0c 01       	movw	r0, r24
 418:	ca 01       	movw	r24, r20
 41a:	a0 01       	movw	r20, r0
 41c:	11 24       	eor	r1, r1
 41e:	ff 27       	eor	r31, r31
 420:	59 1b       	sub	r21, r25
 422:	99 f0       	breq	.+38     	; 0x44a <__addsf3x+0x5c>
 424:	59 3f       	cpi	r21, 0xF9	; 249
 426:	50 f4       	brcc	.+20     	; 0x43c <__addsf3x+0x4e>
 428:	50 3e       	cpi	r21, 0xE0	; 224
 42a:	68 f1       	brcs	.+90     	; 0x486 <__stack+0x27>
 42c:	1a 16       	cp	r1, r26
 42e:	f0 40       	sbci	r31, 0x00	; 0
 430:	a2 2f       	mov	r26, r18
 432:	23 2f       	mov	r18, r19
 434:	34 2f       	mov	r19, r20
 436:	44 27       	eor	r20, r20
 438:	58 5f       	subi	r21, 0xF8	; 248
 43a:	f3 cf       	rjmp	.-26     	; 0x422 <__addsf3x+0x34>
 43c:	46 95       	lsr	r20
 43e:	37 95       	ror	r19
 440:	27 95       	ror	r18
 442:	a7 95       	ror	r26
 444:	f0 40       	sbci	r31, 0x00	; 0
 446:	53 95       	inc	r21
 448:	c9 f7       	brne	.-14     	; 0x43c <__addsf3x+0x4e>
 44a:	7e f4       	brtc	.+30     	; 0x46a <__stack+0xb>
 44c:	1f 16       	cp	r1, r31
 44e:	ba 0b       	sbc	r27, r26
 450:	62 0b       	sbc	r22, r18
 452:	73 0b       	sbc	r23, r19
 454:	84 0b       	sbc	r24, r20
 456:	ba f0       	brmi	.+46     	; 0x486 <__stack+0x27>
 458:	91 50       	subi	r25, 0x01	; 1
 45a:	a1 f0       	breq	.+40     	; 0x484 <__stack+0x25>
 45c:	ff 0f       	add	r31, r31
 45e:	bb 1f       	adc	r27, r27
 460:	66 1f       	adc	r22, r22
 462:	77 1f       	adc	r23, r23
 464:	88 1f       	adc	r24, r24
 466:	c2 f7       	brpl	.-16     	; 0x458 <__addsf3x+0x6a>
 468:	0e c0       	rjmp	.+28     	; 0x486 <__stack+0x27>
 46a:	ba 0f       	add	r27, r26
 46c:	62 1f       	adc	r22, r18
 46e:	73 1f       	adc	r23, r19
 470:	84 1f       	adc	r24, r20
 472:	48 f4       	brcc	.+18     	; 0x486 <__stack+0x27>
 474:	87 95       	ror	r24
 476:	77 95       	ror	r23
 478:	67 95       	ror	r22
 47a:	b7 95       	ror	r27
 47c:	f7 95       	ror	r31
 47e:	9e 3f       	cpi	r25, 0xFE	; 254
 480:	08 f0       	brcs	.+2      	; 0x484 <__stack+0x25>
 482:	b3 cf       	rjmp	.-154    	; 0x3ea <__addsf3+0x1e>
 484:	93 95       	inc	r25
 486:	88 0f       	add	r24, r24
 488:	08 f0       	brcs	.+2      	; 0x48c <__stack+0x2d>
 48a:	99 27       	eor	r25, r25
 48c:	ee 0f       	add	r30, r30
 48e:	97 95       	ror	r25
 490:	87 95       	ror	r24
 492:	08 95       	ret

00000494 <__divsf3>:
 494:	0c d0       	rcall	.+24     	; 0x4ae <__divsf3x>
 496:	eb c0       	rjmp	.+470    	; 0x66e <__fp_round>
 498:	e3 d0       	rcall	.+454    	; 0x660 <__fp_pscB>
 49a:	40 f0       	brcs	.+16     	; 0x4ac <__divsf3+0x18>
 49c:	da d0       	rcall	.+436    	; 0x652 <__fp_pscA>
 49e:	30 f0       	brcs	.+12     	; 0x4ac <__divsf3+0x18>
 4a0:	21 f4       	brne	.+8      	; 0x4aa <__divsf3+0x16>
 4a2:	5f 3f       	cpi	r21, 0xFF	; 255
 4a4:	19 f0       	breq	.+6      	; 0x4ac <__divsf3+0x18>
 4a6:	cc c0       	rjmp	.+408    	; 0x640 <__fp_inf>
 4a8:	51 11       	cpse	r21, r1
 4aa:	15 c1       	rjmp	.+554    	; 0x6d6 <__fp_szero>
 4ac:	cf c0       	rjmp	.+414    	; 0x64c <__fp_nan>

000004ae <__divsf3x>:
 4ae:	f0 d0       	rcall	.+480    	; 0x690 <__fp_split3>
 4b0:	98 f3       	brcs	.-26     	; 0x498 <__divsf3+0x4>

000004b2 <__divsf3_pse>:
 4b2:	99 23       	and	r25, r25
 4b4:	c9 f3       	breq	.-14     	; 0x4a8 <__divsf3+0x14>
 4b6:	55 23       	and	r21, r21
 4b8:	b1 f3       	breq	.-20     	; 0x4a6 <__divsf3+0x12>
 4ba:	95 1b       	sub	r25, r21
 4bc:	55 0b       	sbc	r21, r21
 4be:	bb 27       	eor	r27, r27
 4c0:	aa 27       	eor	r26, r26
 4c2:	62 17       	cp	r22, r18
 4c4:	73 07       	cpc	r23, r19
 4c6:	84 07       	cpc	r24, r20
 4c8:	38 f0       	brcs	.+14     	; 0x4d8 <__divsf3_pse+0x26>
 4ca:	9f 5f       	subi	r25, 0xFF	; 255
 4cc:	5f 4f       	sbci	r21, 0xFF	; 255
 4ce:	22 0f       	add	r18, r18
 4d0:	33 1f       	adc	r19, r19
 4d2:	44 1f       	adc	r20, r20
 4d4:	aa 1f       	adc	r26, r26
 4d6:	a9 f3       	breq	.-22     	; 0x4c2 <__divsf3_pse+0x10>
 4d8:	33 d0       	rcall	.+102    	; 0x540 <__divsf3_pse+0x8e>
 4da:	0e 2e       	mov	r0, r30
 4dc:	3a f0       	brmi	.+14     	; 0x4ec <__divsf3_pse+0x3a>
 4de:	e0 e8       	ldi	r30, 0x80	; 128
 4e0:	30 d0       	rcall	.+96     	; 0x542 <__divsf3_pse+0x90>
 4e2:	91 50       	subi	r25, 0x01	; 1
 4e4:	50 40       	sbci	r21, 0x00	; 0
 4e6:	e6 95       	lsr	r30
 4e8:	00 1c       	adc	r0, r0
 4ea:	ca f7       	brpl	.-14     	; 0x4de <__divsf3_pse+0x2c>
 4ec:	29 d0       	rcall	.+82     	; 0x540 <__divsf3_pse+0x8e>
 4ee:	fe 2f       	mov	r31, r30
 4f0:	27 d0       	rcall	.+78     	; 0x540 <__divsf3_pse+0x8e>
 4f2:	66 0f       	add	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	88 1f       	adc	r24, r24
 4f8:	bb 1f       	adc	r27, r27
 4fa:	26 17       	cp	r18, r22
 4fc:	37 07       	cpc	r19, r23
 4fe:	48 07       	cpc	r20, r24
 500:	ab 07       	cpc	r26, r27
 502:	b0 e8       	ldi	r27, 0x80	; 128
 504:	09 f0       	breq	.+2      	; 0x508 <__divsf3_pse+0x56>
 506:	bb 0b       	sbc	r27, r27
 508:	80 2d       	mov	r24, r0
 50a:	bf 01       	movw	r22, r30
 50c:	ff 27       	eor	r31, r31
 50e:	93 58       	subi	r25, 0x83	; 131
 510:	5f 4f       	sbci	r21, 0xFF	; 255
 512:	2a f0       	brmi	.+10     	; 0x51e <__divsf3_pse+0x6c>
 514:	9e 3f       	cpi	r25, 0xFE	; 254
 516:	51 05       	cpc	r21, r1
 518:	68 f0       	brcs	.+26     	; 0x534 <__divsf3_pse+0x82>
 51a:	92 c0       	rjmp	.+292    	; 0x640 <__fp_inf>
 51c:	dc c0       	rjmp	.+440    	; 0x6d6 <__fp_szero>
 51e:	5f 3f       	cpi	r21, 0xFF	; 255
 520:	ec f3       	brlt	.-6      	; 0x51c <__divsf3_pse+0x6a>
 522:	98 3e       	cpi	r25, 0xE8	; 232
 524:	dc f3       	brlt	.-10     	; 0x51c <__divsf3_pse+0x6a>
 526:	86 95       	lsr	r24
 528:	77 95       	ror	r23
 52a:	67 95       	ror	r22
 52c:	b7 95       	ror	r27
 52e:	f7 95       	ror	r31
 530:	9f 5f       	subi	r25, 0xFF	; 255
 532:	c9 f7       	brne	.-14     	; 0x526 <__divsf3_pse+0x74>
 534:	88 0f       	add	r24, r24
 536:	91 1d       	adc	r25, r1
 538:	96 95       	lsr	r25
 53a:	87 95       	ror	r24
 53c:	97 f9       	bld	r25, 7
 53e:	08 95       	ret
 540:	e1 e0       	ldi	r30, 0x01	; 1
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	88 1f       	adc	r24, r24
 548:	bb 1f       	adc	r27, r27
 54a:	62 17       	cp	r22, r18
 54c:	73 07       	cpc	r23, r19
 54e:	84 07       	cpc	r24, r20
 550:	ba 07       	cpc	r27, r26
 552:	20 f0       	brcs	.+8      	; 0x55c <__divsf3_pse+0xaa>
 554:	62 1b       	sub	r22, r18
 556:	73 0b       	sbc	r23, r19
 558:	84 0b       	sbc	r24, r20
 55a:	ba 0b       	sbc	r27, r26
 55c:	ee 1f       	adc	r30, r30
 55e:	88 f7       	brcc	.-30     	; 0x542 <__divsf3_pse+0x90>
 560:	e0 95       	com	r30
 562:	08 95       	ret

00000564 <__fixsfsi>:
 564:	04 d0       	rcall	.+8      	; 0x56e <__fixunssfsi>
 566:	68 94       	set
 568:	b1 11       	cpse	r27, r1
 56a:	b5 c0       	rjmp	.+362    	; 0x6d6 <__fp_szero>
 56c:	08 95       	ret

0000056e <__fixunssfsi>:
 56e:	98 d0       	rcall	.+304    	; 0x6a0 <__fp_splitA>
 570:	88 f0       	brcs	.+34     	; 0x594 <__fixunssfsi+0x26>
 572:	9f 57       	subi	r25, 0x7F	; 127
 574:	90 f0       	brcs	.+36     	; 0x59a <__fixunssfsi+0x2c>
 576:	b9 2f       	mov	r27, r25
 578:	99 27       	eor	r25, r25
 57a:	b7 51       	subi	r27, 0x17	; 23
 57c:	a0 f0       	brcs	.+40     	; 0x5a6 <__fixunssfsi+0x38>
 57e:	d1 f0       	breq	.+52     	; 0x5b4 <__fixunssfsi+0x46>
 580:	66 0f       	add	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	88 1f       	adc	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	1a f0       	brmi	.+6      	; 0x590 <__fixunssfsi+0x22>
 58a:	ba 95       	dec	r27
 58c:	c9 f7       	brne	.-14     	; 0x580 <__fixunssfsi+0x12>
 58e:	12 c0       	rjmp	.+36     	; 0x5b4 <__fixunssfsi+0x46>
 590:	b1 30       	cpi	r27, 0x01	; 1
 592:	81 f0       	breq	.+32     	; 0x5b4 <__fixunssfsi+0x46>
 594:	9f d0       	rcall	.+318    	; 0x6d4 <__fp_zero>
 596:	b1 e0       	ldi	r27, 0x01	; 1
 598:	08 95       	ret
 59a:	9c c0       	rjmp	.+312    	; 0x6d4 <__fp_zero>
 59c:	67 2f       	mov	r22, r23
 59e:	78 2f       	mov	r23, r24
 5a0:	88 27       	eor	r24, r24
 5a2:	b8 5f       	subi	r27, 0xF8	; 248
 5a4:	39 f0       	breq	.+14     	; 0x5b4 <__fixunssfsi+0x46>
 5a6:	b9 3f       	cpi	r27, 0xF9	; 249
 5a8:	cc f3       	brlt	.-14     	; 0x59c <__fixunssfsi+0x2e>
 5aa:	86 95       	lsr	r24
 5ac:	77 95       	ror	r23
 5ae:	67 95       	ror	r22
 5b0:	b3 95       	inc	r27
 5b2:	d9 f7       	brne	.-10     	; 0x5aa <__fixunssfsi+0x3c>
 5b4:	3e f4       	brtc	.+14     	; 0x5c4 <__fixunssfsi+0x56>
 5b6:	90 95       	com	r25
 5b8:	80 95       	com	r24
 5ba:	70 95       	com	r23
 5bc:	61 95       	neg	r22
 5be:	7f 4f       	sbci	r23, 0xFF	; 255
 5c0:	8f 4f       	sbci	r24, 0xFF	; 255
 5c2:	9f 4f       	sbci	r25, 0xFF	; 255
 5c4:	08 95       	ret

000005c6 <__floatunsisf>:
 5c6:	e8 94       	clt
 5c8:	09 c0       	rjmp	.+18     	; 0x5dc <__floatsisf+0x12>

000005ca <__floatsisf>:
 5ca:	97 fb       	bst	r25, 7
 5cc:	3e f4       	brtc	.+14     	; 0x5dc <__floatsisf+0x12>
 5ce:	90 95       	com	r25
 5d0:	80 95       	com	r24
 5d2:	70 95       	com	r23
 5d4:	61 95       	neg	r22
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255
 5d8:	8f 4f       	sbci	r24, 0xFF	; 255
 5da:	9f 4f       	sbci	r25, 0xFF	; 255
 5dc:	99 23       	and	r25, r25
 5de:	a9 f0       	breq	.+42     	; 0x60a <__floatsisf+0x40>
 5e0:	f9 2f       	mov	r31, r25
 5e2:	96 e9       	ldi	r25, 0x96	; 150
 5e4:	bb 27       	eor	r27, r27
 5e6:	93 95       	inc	r25
 5e8:	f6 95       	lsr	r31
 5ea:	87 95       	ror	r24
 5ec:	77 95       	ror	r23
 5ee:	67 95       	ror	r22
 5f0:	b7 95       	ror	r27
 5f2:	f1 11       	cpse	r31, r1
 5f4:	f8 cf       	rjmp	.-16     	; 0x5e6 <__floatsisf+0x1c>
 5f6:	fa f4       	brpl	.+62     	; 0x636 <__floatsisf+0x6c>
 5f8:	bb 0f       	add	r27, r27
 5fa:	11 f4       	brne	.+4      	; 0x600 <__floatsisf+0x36>
 5fc:	60 ff       	sbrs	r22, 0
 5fe:	1b c0       	rjmp	.+54     	; 0x636 <__floatsisf+0x6c>
 600:	6f 5f       	subi	r22, 0xFF	; 255
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	8f 4f       	sbci	r24, 0xFF	; 255
 606:	9f 4f       	sbci	r25, 0xFF	; 255
 608:	16 c0       	rjmp	.+44     	; 0x636 <__floatsisf+0x6c>
 60a:	88 23       	and	r24, r24
 60c:	11 f0       	breq	.+4      	; 0x612 <__floatsisf+0x48>
 60e:	96 e9       	ldi	r25, 0x96	; 150
 610:	11 c0       	rjmp	.+34     	; 0x634 <__floatsisf+0x6a>
 612:	77 23       	and	r23, r23
 614:	21 f0       	breq	.+8      	; 0x61e <__floatsisf+0x54>
 616:	9e e8       	ldi	r25, 0x8E	; 142
 618:	87 2f       	mov	r24, r23
 61a:	76 2f       	mov	r23, r22
 61c:	05 c0       	rjmp	.+10     	; 0x628 <__floatsisf+0x5e>
 61e:	66 23       	and	r22, r22
 620:	71 f0       	breq	.+28     	; 0x63e <__floatsisf+0x74>
 622:	96 e8       	ldi	r25, 0x86	; 134
 624:	86 2f       	mov	r24, r22
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	60 e0       	ldi	r22, 0x00	; 0
 62a:	2a f0       	brmi	.+10     	; 0x636 <__floatsisf+0x6c>
 62c:	9a 95       	dec	r25
 62e:	66 0f       	add	r22, r22
 630:	77 1f       	adc	r23, r23
 632:	88 1f       	adc	r24, r24
 634:	da f7       	brpl	.-10     	; 0x62c <__floatsisf+0x62>
 636:	88 0f       	add	r24, r24
 638:	96 95       	lsr	r25
 63a:	87 95       	ror	r24
 63c:	97 f9       	bld	r25, 7
 63e:	08 95       	ret

00000640 <__fp_inf>:
 640:	97 f9       	bld	r25, 7
 642:	9f 67       	ori	r25, 0x7F	; 127
 644:	80 e8       	ldi	r24, 0x80	; 128
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	60 e0       	ldi	r22, 0x00	; 0
 64a:	08 95       	ret

0000064c <__fp_nan>:
 64c:	9f ef       	ldi	r25, 0xFF	; 255
 64e:	80 ec       	ldi	r24, 0xC0	; 192
 650:	08 95       	ret

00000652 <__fp_pscA>:
 652:	00 24       	eor	r0, r0
 654:	0a 94       	dec	r0
 656:	16 16       	cp	r1, r22
 658:	17 06       	cpc	r1, r23
 65a:	18 06       	cpc	r1, r24
 65c:	09 06       	cpc	r0, r25
 65e:	08 95       	ret

00000660 <__fp_pscB>:
 660:	00 24       	eor	r0, r0
 662:	0a 94       	dec	r0
 664:	12 16       	cp	r1, r18
 666:	13 06       	cpc	r1, r19
 668:	14 06       	cpc	r1, r20
 66a:	05 06       	cpc	r0, r21
 66c:	08 95       	ret

0000066e <__fp_round>:
 66e:	09 2e       	mov	r0, r25
 670:	03 94       	inc	r0
 672:	00 0c       	add	r0, r0
 674:	11 f4       	brne	.+4      	; 0x67a <__fp_round+0xc>
 676:	88 23       	and	r24, r24
 678:	52 f0       	brmi	.+20     	; 0x68e <__fp_round+0x20>
 67a:	bb 0f       	add	r27, r27
 67c:	40 f4       	brcc	.+16     	; 0x68e <__fp_round+0x20>
 67e:	bf 2b       	or	r27, r31
 680:	11 f4       	brne	.+4      	; 0x686 <__fp_round+0x18>
 682:	60 ff       	sbrs	r22, 0
 684:	04 c0       	rjmp	.+8      	; 0x68e <__fp_round+0x20>
 686:	6f 5f       	subi	r22, 0xFF	; 255
 688:	7f 4f       	sbci	r23, 0xFF	; 255
 68a:	8f 4f       	sbci	r24, 0xFF	; 255
 68c:	9f 4f       	sbci	r25, 0xFF	; 255
 68e:	08 95       	ret

00000690 <__fp_split3>:
 690:	57 fd       	sbrc	r21, 7
 692:	90 58       	subi	r25, 0x80	; 128
 694:	44 0f       	add	r20, r20
 696:	55 1f       	adc	r21, r21
 698:	59 f0       	breq	.+22     	; 0x6b0 <__fp_splitA+0x10>
 69a:	5f 3f       	cpi	r21, 0xFF	; 255
 69c:	71 f0       	breq	.+28     	; 0x6ba <__fp_splitA+0x1a>
 69e:	47 95       	ror	r20

000006a0 <__fp_splitA>:
 6a0:	88 0f       	add	r24, r24
 6a2:	97 fb       	bst	r25, 7
 6a4:	99 1f       	adc	r25, r25
 6a6:	61 f0       	breq	.+24     	; 0x6c0 <__fp_splitA+0x20>
 6a8:	9f 3f       	cpi	r25, 0xFF	; 255
 6aa:	79 f0       	breq	.+30     	; 0x6ca <__fp_splitA+0x2a>
 6ac:	87 95       	ror	r24
 6ae:	08 95       	ret
 6b0:	12 16       	cp	r1, r18
 6b2:	13 06       	cpc	r1, r19
 6b4:	14 06       	cpc	r1, r20
 6b6:	55 1f       	adc	r21, r21
 6b8:	f2 cf       	rjmp	.-28     	; 0x69e <__fp_split3+0xe>
 6ba:	46 95       	lsr	r20
 6bc:	f1 df       	rcall	.-30     	; 0x6a0 <__fp_splitA>
 6be:	08 c0       	rjmp	.+16     	; 0x6d0 <__fp_splitA+0x30>
 6c0:	16 16       	cp	r1, r22
 6c2:	17 06       	cpc	r1, r23
 6c4:	18 06       	cpc	r1, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	f1 cf       	rjmp	.-30     	; 0x6ac <__fp_splitA+0xc>
 6ca:	86 95       	lsr	r24
 6cc:	71 05       	cpc	r23, r1
 6ce:	61 05       	cpc	r22, r1
 6d0:	08 94       	sec
 6d2:	08 95       	ret

000006d4 <__fp_zero>:
 6d4:	e8 94       	clt

000006d6 <__fp_szero>:
 6d6:	bb 27       	eor	r27, r27
 6d8:	66 27       	eor	r22, r22
 6da:	77 27       	eor	r23, r23
 6dc:	cb 01       	movw	r24, r22
 6de:	97 f9       	bld	r25, 7
 6e0:	08 95       	ret

000006e2 <__mulsf3>:
 6e2:	0b d0       	rcall	.+22     	; 0x6fa <__mulsf3x>
 6e4:	c4 cf       	rjmp	.-120    	; 0x66e <__fp_round>
 6e6:	b5 df       	rcall	.-150    	; 0x652 <__fp_pscA>
 6e8:	28 f0       	brcs	.+10     	; 0x6f4 <__mulsf3+0x12>
 6ea:	ba df       	rcall	.-140    	; 0x660 <__fp_pscB>
 6ec:	18 f0       	brcs	.+6      	; 0x6f4 <__mulsf3+0x12>
 6ee:	95 23       	and	r25, r21
 6f0:	09 f0       	breq	.+2      	; 0x6f4 <__mulsf3+0x12>
 6f2:	a6 cf       	rjmp	.-180    	; 0x640 <__fp_inf>
 6f4:	ab cf       	rjmp	.-170    	; 0x64c <__fp_nan>
 6f6:	11 24       	eor	r1, r1
 6f8:	ee cf       	rjmp	.-36     	; 0x6d6 <__fp_szero>

000006fa <__mulsf3x>:
 6fa:	ca df       	rcall	.-108    	; 0x690 <__fp_split3>
 6fc:	a0 f3       	brcs	.-24     	; 0x6e6 <__mulsf3+0x4>

000006fe <__mulsf3_pse>:
 6fe:	95 9f       	mul	r25, r21
 700:	d1 f3       	breq	.-12     	; 0x6f6 <__mulsf3+0x14>
 702:	95 0f       	add	r25, r21
 704:	50 e0       	ldi	r21, 0x00	; 0
 706:	55 1f       	adc	r21, r21
 708:	62 9f       	mul	r22, r18
 70a:	f0 01       	movw	r30, r0
 70c:	72 9f       	mul	r23, r18
 70e:	bb 27       	eor	r27, r27
 710:	f0 0d       	add	r31, r0
 712:	b1 1d       	adc	r27, r1
 714:	63 9f       	mul	r22, r19
 716:	aa 27       	eor	r26, r26
 718:	f0 0d       	add	r31, r0
 71a:	b1 1d       	adc	r27, r1
 71c:	aa 1f       	adc	r26, r26
 71e:	64 9f       	mul	r22, r20
 720:	66 27       	eor	r22, r22
 722:	b0 0d       	add	r27, r0
 724:	a1 1d       	adc	r26, r1
 726:	66 1f       	adc	r22, r22
 728:	82 9f       	mul	r24, r18
 72a:	22 27       	eor	r18, r18
 72c:	b0 0d       	add	r27, r0
 72e:	a1 1d       	adc	r26, r1
 730:	62 1f       	adc	r22, r18
 732:	73 9f       	mul	r23, r19
 734:	b0 0d       	add	r27, r0
 736:	a1 1d       	adc	r26, r1
 738:	62 1f       	adc	r22, r18
 73a:	83 9f       	mul	r24, r19
 73c:	a0 0d       	add	r26, r0
 73e:	61 1d       	adc	r22, r1
 740:	22 1f       	adc	r18, r18
 742:	74 9f       	mul	r23, r20
 744:	33 27       	eor	r19, r19
 746:	a0 0d       	add	r26, r0
 748:	61 1d       	adc	r22, r1
 74a:	23 1f       	adc	r18, r19
 74c:	84 9f       	mul	r24, r20
 74e:	60 0d       	add	r22, r0
 750:	21 1d       	adc	r18, r1
 752:	82 2f       	mov	r24, r18
 754:	76 2f       	mov	r23, r22
 756:	6a 2f       	mov	r22, r26
 758:	11 24       	eor	r1, r1
 75a:	9f 57       	subi	r25, 0x7F	; 127
 75c:	50 40       	sbci	r21, 0x00	; 0
 75e:	8a f0       	brmi	.+34     	; 0x782 <__mulsf3_pse+0x84>
 760:	e1 f0       	breq	.+56     	; 0x79a <__mulsf3_pse+0x9c>
 762:	88 23       	and	r24, r24
 764:	4a f0       	brmi	.+18     	; 0x778 <__mulsf3_pse+0x7a>
 766:	ee 0f       	add	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	bb 1f       	adc	r27, r27
 76c:	66 1f       	adc	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	91 50       	subi	r25, 0x01	; 1
 774:	50 40       	sbci	r21, 0x00	; 0
 776:	a9 f7       	brne	.-22     	; 0x762 <__mulsf3_pse+0x64>
 778:	9e 3f       	cpi	r25, 0xFE	; 254
 77a:	51 05       	cpc	r21, r1
 77c:	70 f0       	brcs	.+28     	; 0x79a <__mulsf3_pse+0x9c>
 77e:	60 cf       	rjmp	.-320    	; 0x640 <__fp_inf>
 780:	aa cf       	rjmp	.-172    	; 0x6d6 <__fp_szero>
 782:	5f 3f       	cpi	r21, 0xFF	; 255
 784:	ec f3       	brlt	.-6      	; 0x780 <__mulsf3_pse+0x82>
 786:	98 3e       	cpi	r25, 0xE8	; 232
 788:	dc f3       	brlt	.-10     	; 0x780 <__mulsf3_pse+0x82>
 78a:	86 95       	lsr	r24
 78c:	77 95       	ror	r23
 78e:	67 95       	ror	r22
 790:	b7 95       	ror	r27
 792:	f7 95       	ror	r31
 794:	e7 95       	ror	r30
 796:	9f 5f       	subi	r25, 0xFF	; 255
 798:	c1 f7       	brne	.-16     	; 0x78a <__mulsf3_pse+0x8c>
 79a:	fe 2b       	or	r31, r30
 79c:	88 0f       	add	r24, r24
 79e:	91 1d       	adc	r25, r1
 7a0:	96 95       	lsr	r25
 7a2:	87 95       	ror	r24
 7a4:	97 f9       	bld	r25, 7
 7a6:	08 95       	ret

000007a8 <__mulsi3>:
 7a8:	62 9f       	mul	r22, r18
 7aa:	d0 01       	movw	r26, r0
 7ac:	73 9f       	mul	r23, r19
 7ae:	f0 01       	movw	r30, r0
 7b0:	82 9f       	mul	r24, r18
 7b2:	e0 0d       	add	r30, r0
 7b4:	f1 1d       	adc	r31, r1
 7b6:	64 9f       	mul	r22, r20
 7b8:	e0 0d       	add	r30, r0
 7ba:	f1 1d       	adc	r31, r1
 7bc:	92 9f       	mul	r25, r18
 7be:	f0 0d       	add	r31, r0
 7c0:	83 9f       	mul	r24, r19
 7c2:	f0 0d       	add	r31, r0
 7c4:	74 9f       	mul	r23, r20
 7c6:	f0 0d       	add	r31, r0
 7c8:	65 9f       	mul	r22, r21
 7ca:	f0 0d       	add	r31, r0
 7cc:	99 27       	eor	r25, r25
 7ce:	72 9f       	mul	r23, r18
 7d0:	b0 0d       	add	r27, r0
 7d2:	e1 1d       	adc	r30, r1
 7d4:	f9 1f       	adc	r31, r25
 7d6:	63 9f       	mul	r22, r19
 7d8:	b0 0d       	add	r27, r0
 7da:	e1 1d       	adc	r30, r1
 7dc:	f9 1f       	adc	r31, r25
 7de:	bd 01       	movw	r22, r26
 7e0:	cf 01       	movw	r24, r30
 7e2:	11 24       	eor	r1, r1
 7e4:	08 95       	ret

000007e6 <__divmodhi4>:
 7e6:	97 fb       	bst	r25, 7
 7e8:	09 2e       	mov	r0, r25
 7ea:	07 26       	eor	r0, r23
 7ec:	0a d0       	rcall	.+20     	; 0x802 <__divmodhi4_neg1>
 7ee:	77 fd       	sbrc	r23, 7
 7f0:	04 d0       	rcall	.+8      	; 0x7fa <__divmodhi4_neg2>
 7f2:	2e d0       	rcall	.+92     	; 0x850 <__udivmodhi4>
 7f4:	06 d0       	rcall	.+12     	; 0x802 <__divmodhi4_neg1>
 7f6:	00 20       	and	r0, r0
 7f8:	1a f4       	brpl	.+6      	; 0x800 <__divmodhi4_exit>

000007fa <__divmodhi4_neg2>:
 7fa:	70 95       	com	r23
 7fc:	61 95       	neg	r22
 7fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000800 <__divmodhi4_exit>:
 800:	08 95       	ret

00000802 <__divmodhi4_neg1>:
 802:	f6 f7       	brtc	.-4      	; 0x800 <__divmodhi4_exit>
 804:	90 95       	com	r25
 806:	81 95       	neg	r24
 808:	9f 4f       	sbci	r25, 0xFF	; 255
 80a:	08 95       	ret

0000080c <__udivmodsi4>:
 80c:	a1 e2       	ldi	r26, 0x21	; 33
 80e:	1a 2e       	mov	r1, r26
 810:	aa 1b       	sub	r26, r26
 812:	bb 1b       	sub	r27, r27
 814:	fd 01       	movw	r30, r26
 816:	0d c0       	rjmp	.+26     	; 0x832 <__udivmodsi4_ep>

00000818 <__udivmodsi4_loop>:
 818:	aa 1f       	adc	r26, r26
 81a:	bb 1f       	adc	r27, r27
 81c:	ee 1f       	adc	r30, r30
 81e:	ff 1f       	adc	r31, r31
 820:	a2 17       	cp	r26, r18
 822:	b3 07       	cpc	r27, r19
 824:	e4 07       	cpc	r30, r20
 826:	f5 07       	cpc	r31, r21
 828:	20 f0       	brcs	.+8      	; 0x832 <__udivmodsi4_ep>
 82a:	a2 1b       	sub	r26, r18
 82c:	b3 0b       	sbc	r27, r19
 82e:	e4 0b       	sbc	r30, r20
 830:	f5 0b       	sbc	r31, r21

00000832 <__udivmodsi4_ep>:
 832:	66 1f       	adc	r22, r22
 834:	77 1f       	adc	r23, r23
 836:	88 1f       	adc	r24, r24
 838:	99 1f       	adc	r25, r25
 83a:	1a 94       	dec	r1
 83c:	69 f7       	brne	.-38     	; 0x818 <__udivmodsi4_loop>
 83e:	60 95       	com	r22
 840:	70 95       	com	r23
 842:	80 95       	com	r24
 844:	90 95       	com	r25
 846:	9b 01       	movw	r18, r22
 848:	ac 01       	movw	r20, r24
 84a:	bd 01       	movw	r22, r26
 84c:	cf 01       	movw	r24, r30
 84e:	08 95       	ret

00000850 <__udivmodhi4>:
 850:	aa 1b       	sub	r26, r26
 852:	bb 1b       	sub	r27, r27
 854:	51 e1       	ldi	r21, 0x11	; 17
 856:	07 c0       	rjmp	.+14     	; 0x866 <__udivmodhi4_ep>

00000858 <__udivmodhi4_loop>:
 858:	aa 1f       	adc	r26, r26
 85a:	bb 1f       	adc	r27, r27
 85c:	a6 17       	cp	r26, r22
 85e:	b7 07       	cpc	r27, r23
 860:	10 f0       	brcs	.+4      	; 0x866 <__udivmodhi4_ep>
 862:	a6 1b       	sub	r26, r22
 864:	b7 0b       	sbc	r27, r23

00000866 <__udivmodhi4_ep>:
 866:	88 1f       	adc	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	5a 95       	dec	r21
 86c:	a9 f7       	brne	.-22     	; 0x858 <__udivmodhi4_loop>
 86e:	80 95       	com	r24
 870:	90 95       	com	r25
 872:	bc 01       	movw	r22, r24
 874:	cd 01       	movw	r24, r26
 876:	08 95       	ret

00000878 <_exit>:
 878:	f8 94       	cli

0000087a <__stop_program>:
 87a:	ff cf       	rjmp	.-2      	; 0x87a <__stop_program>
